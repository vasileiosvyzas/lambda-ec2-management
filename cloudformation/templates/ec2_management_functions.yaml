Resources:
  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaEC2StartStopExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "ec2:Start*"
              - "ec2:Stop*"
            Resource: "*"
      Roles:
        - !Ref LambdaExecutionRole

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaEC2StartStopExecutionPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref LambdaEC2StartStopExecutionPolicy

  LambdaFunctionEC2Start:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EC2Start
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          region = 'us-east-1'
          ec2 = boto3.client('ec2', region_name=region)

          def lambda_handler(event, context):
              instances=os.environ['EC2_INSTANCES'].split(",")
              ec2.start_instances(InstanceIds=instances)
              print('started instances: ' + str(instances))

  LambdaFunctionEC2Stop:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EC2Stop
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          region = 'us-east-1'
          ec2 = boto3.client('ec2', region_name=region)

          def lambda_handler(event, context):
              instances=os.environ['EC2_INSTANCES'].split(",")
              ec2.stop_instances(InstanceIds=instances)
              print('stopped instances: ' + str(instances))
          